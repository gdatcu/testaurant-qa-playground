openapi: 3.0.3
info:
  title: Testaurant API
  version: "1.0.0"
  description: |
    API for the Testaurant QA Automation Playground.
    Features: menu, coupons, cart pricing, checkout with idempotency, inventory & stock, orders, exchange rates, stats, images (via image_url), chaos hooks.

servers:
  - url: https://apps.qualiadept.eu/testaurant
    description: Production
  - url: {baseUrl}
    description: Custom (variable)
    variables:
      baseUrl:
        default: https://apps.qualiadept.eu/testaurant
        description: Base URL of the API (no trailing slash)

tags:
  - name: Health
  - name: Catalog
  - name: Cart & Checkout
  - name: Coupons
  - name: Orders
  - name: Inventory (Admin)
  - name: Rates (Admin)
  - name: Stats (Admin)
  - name: Webhooks

components:
  securitySchemes:
    AdminApiKey:
      type: apiKey
      in: header
      name: X-API-Key
      description: Admin API key from config.php
  parameters:
    CurrencyParam:
      name: currency
      in: query
      required: false
      schema:
        type: string
        enum: [RON, EUR, USD]
      description: Display currency (conversion done from base RON)
    PageParam:
      name: page
      in: query
      schema: { type: integer, minimum: 1, default: 1 }
    LimitParam:
      name: limit
      in: query
      schema: { type: integer, minimum: 1, maximum: 100, default: 20 }
    ChaosParam:
      name: chaos
      in: query
      schema: { type: string }
      description: Enable chaos mode (random latency and occasional 503)
    SlowParam:
      name: slow
      in: query
      schema: { type: integer, minimum: 0 }
      description: Add artificial delay in milliseconds
  headers:
    IdempotencyKey:
      description: Idempotency key for checkout. If a request with the same key is replayed, the same orderId is returned.
      schema: { type: string }
  schemas:
    Error:
      type: object
      properties:
        error: { type: string }
        details: { type: string, nullable: true }
    Health:
      type: object
      properties:
        ok: { type: boolean, example: true }
        time: { type: string, format: date-time }
    CategoryList:
      type: object
      properties:
        categories:
          type: array
          items: { type: string }
    MenuItem:
      type: object
      properties:
        id: { type: integer, example: 1 }
        name: { type: string }
        description: { type: string, nullable: true }
        category: { type: string, nullable: true, example: "Pizza" }
        price: { type: number, format: float, example: 28.0, description: Base currency (RON) }
        vat_rate: { type: number, format: float, example: 9.0 }
        stock: { type: integer, example: 50 }
        image_url: { type: string, format: uri, nullable: true }
        available: { type: integer, example: 1, description: 1=available, 0=hidden }
        price_converted: { type: number, format: float, nullable: true, description: Present if ?currency!=RON }
    MenuQuery:
      type: object
      properties:
        items:
          type: array
          items: { $ref: '#/components/schemas/MenuItem' }
        page: { type: integer }
        limit: { type: integer }
        currency: { type: string, enum: [RON, EUR, USD], nullable: true }
    MenuCreate:
      type: object
      required: [name, price, vat_rate, stock]
      properties:
        name: { type: string }
        description: { type: string, nullable: true }
        category: { type: string, nullable: true }
        price: { type: number, format: float }
        vat_rate: { type: number, format: float }
        stock: { type: integer }
        image_url: { type: string, format: uri, nullable: true }
    CouponValidation:
      type: object
      properties:
        valid: { type: boolean }
        coupon:
          type: object
          nullable: true
          properties:
            code: { type: string }
            type: { type: string, enum: [percent, amount] }
            value: { type: number, format: float }
            minSubtotal: { type: number, format: float }
    CartItemIn:
      type: object
      required: [id, qty]
      properties:
        id: { type: integer }
        qty: { type: integer, minimum: 1 }
    CartPriceRequest:
      type: object
      required: [items]
      properties:
        items:
          type: array
          items: { $ref: '#/components/schemas/CartItemIn' }
        deliveryMethod:
          type: string
          enum: [pickup, delivery]
          default: pickup
        couponCode:
          type: string
          nullable: true
        currency:
          type: string
          enum: [RON, EUR, USD]
          nullable: true
    CartPriceResponse:
      type: object
      properties:
        subtotal: { type: number, format: float }
        discount: { type: number, format: float }
        vat: { type: number, format: float }
        deliveryFee: { type: number, format: float }
        grandTotal: { type: number, format: float }
        baseCurrency: { type: string, example: RON }
        currency: { type: string, example: RON }
        subtotal_converted: { type: number, format: float, nullable: true }
        discount_converted: { type: number, format: float, nullable: true }
        vat_converted: { type: number, format: float, nullable: true }
        deliveryFee_converted: { type: number, format: float, nullable: true }
        grandTotal_converted: { type: number, format: float, nullable: true }
    CheckoutRequest:
      type: object
      required: [customerName, customerPhone, items, paymentMethod, deliveryMethod]
      properties:
        customerName: { type: string }
        customerPhone: { type: string }
        addressLine1: { type: string, nullable: true }
        city: { type: string, nullable: true }
        postalCode: { type: string, nullable: true }
        items:
          type: array
          items: { $ref: '#/components/schemas/CartItemIn' }
        paymentMethod:
          type: string
          enum: [cash, card]
        deliveryMethod:
          type: string
          enum: [pickup, delivery]
        couponCode:
          type: string, nullable: true
        currency:
          type: string, enum: [RON, EUR, USD], nullable: true
    PaymentInfo:
      type: object
      properties:
        status: { type: string, example: captured }
        transactionId: { type: string }
    CheckoutResponse:
      type: object
      properties:
        orderId: { type: integer }
        status: { type: string, example: created }
        total: { type: number, format: float, description: Base currency (RON) }
        currency: { type: string, enum: [RON, EUR, USD] }
        displayTotal: { type: number, format: float }
        payment: { $ref: '#/components/schemas/PaymentInfo' }
    OrderLine:
      type: object
      properties:
        item_id: { type: integer }
        name: { type: string }
        quantity: { type: integer }
        unit_price: { type: number, format: float }
        vat_rate: { type: number, format: float }
        line_total: { type: number, format: float }
        unit_price_display: { type: number, format: float, nullable: true }
        line_total_display: { type: number, format: float, nullable: true }
    OrderSummary:
      type: object
      properties:
        id: { type: integer }
        customer_name: { type: string }
        total_amount: { type: number, format: float }
        total_amount_display: { type: number, format: float, nullable: true }
        status: { type: string, example: created }
        created_at: { type: string, format: date-time }
    OrderDetail:
      type: object
      properties:
        id: { type: integer }
        customer_name: { type: string }
        customer_phone: { type: string }
        address_line1: { type: string, nullable: true }
        city: { type: string, nullable: true }
        postal_code: { type: string, nullable: true }
        delivery_method: { type: string, enum: [pickup, delivery] }
        subtotal: { type: number, format: float }
        discount: { type: number, format: float }
        vat_amount: { type: number, format: float }
        delivery_fee: { type: number, format: float }
        total_amount: { type: number, format: float }
        total_amount_display: { type: number, format: float, nullable: true }
        status: { type: string }
        created_at: { type: string, format: date-time }
        items:
          type: array
          items: { $ref: '#/components/schemas/OrderLine' }
        payment:
          type: object
          nullable: true
          properties:
            method: { type: string, enum: [cash, card] }
            status: { type: string }
            transaction_id: { type: string }
            created_at: { type: string, format: date-time }
    OrderList:
      type: object
      properties:
        orders:
          type: array
          items: { $ref: '#/components/schemas/OrderSummary' }
        page: { type: integer }
        limit: { type: integer }
        currency: { type: string, enum: [RON, EUR, USD] }
    OrderHistory:
      type: object
      properties:
        history:
          type: array
          items:
            type: object
            properties:
              status: { type: string }
              note: { type: string, nullable: true }
              created_at: { type: string, format: date-time }
    StatsResponse:
      type: object
      properties:
        from: { type: string, format: date }
        to: { type: string, format: date }
        currency: { type: string, enum: [RON, EUR, USD] }
        orders_count: { type: integer }
        revenue_sum: { type: number, format: float, description: Base currency }
        revenue_display: { type: number, format: float }
        by_day:
          type: array
          items:
            type: object
            properties:
              d: { type: string, format: date }
              c: { type: integer, description: orders }
              s: { type: number, format: float, description: revenue base }
              s_display: { type: number, format: float, nullable: true }
        top_items:
          type: array
          items:
            type: object
            properties:
              name: { type: string }
              qty: { type: integer }
              revenue: { type: number, format: float }
              revenue_display: { type: number, format: float, nullable: true }
    ExchangeRate:
      type: object
      properties:
        base_currency: { type: string, example: RON }
        currency: { type: string, example: EUR }
        rate: { type: number, format: float, example: 0.2 }
    ExchangeRateList:
      type: object
      properties:
        base: { type: string }
        rates:
          type: array
          items: { $ref: '#/components/schemas/ExchangeRate' }

paths:
  /api/health:
    get:
      tags: [Health]
      summary: Health check
      parameters: [ { $ref: '#/components/parameters/ChaosParam' }, { $ref: '#/components/parameters/SlowParam' } ]
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Health' } } } }

  /api/categories:
    get:
      tags: [Catalog]
      summary: List categories
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/CategoryList' } } } }

  /api/menu:
    get:
      tags: [Catalog]
      summary: List menu items
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/CurrencyParam'
        - name: q
          in: query
          schema: { type: string }
        - name: category
          in: query
          schema: { type: string }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/MenuQuery' } } } }
    post:
      tags: [Catalog]
      summary: Create menu item (admin)
      security: [ { AdminApiKey: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/MenuCreate' }
      responses:
        '201': { description: Created, content: { application/json: { schema: { type: object, properties: { ok: {type: boolean}, id: {type: integer} } } } } }
        '403': { description: Forbidden, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

  /api/coupons/validate:
    get:
      tags: [Coupons]
      summary: Validate coupon code
      parameters:
        - name: code
          in: query
          required: true
          schema: { type: string }
      responses:
        '200': { description: Coupon validation, content: { application/json: { schema: { $ref: '#/components/schemas/CouponValidation' } } } }

  /api/cart/price:
    post:
      tags: [Cart & Checkout]
      summary: Calculate cart totals
      parameters: [ { $ref: '#/components/parameters/CurrencyParam' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CartPriceRequest' }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/CartPriceResponse' } } } }
        '409': { description: Conflict (stock), content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '422': { description: Validation error, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

  /api/checkout:
    post:
      tags: [Cart & Checkout]
      summary: Create order (checkout)
      parameters: [ { $ref: '#/components/parameters/CurrencyParam' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CheckoutRequest' }
      responses:
        '200': { description: Created, headers: { Idempotency-Key: { $ref: '#/components/headers/IdempotencyKey' } }, content: { application/json: { schema: { $ref: '#/components/schemas/CheckoutResponse' } } } }
        '422': { description: Validation error, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

  /api/orders:
    get:
      tags: [Orders]
      summary: List orders (admin)
      security: [ { AdminApiKey: [] } ]
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/CurrencyParam'
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/OrderList' } } } }
        '403': { description: Forbidden, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

  /api/orders/{id}:
    get:
      tags: [Orders]
      summary: Get order details (admin)
      security: [ { AdminApiKey: [] } ]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
        - $ref: '#/components/parameters/CurrencyParam'
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/OrderDetail' } } } }
        '404': { description: Not Found, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
    post:
      tags: [Orders]
      summary: Update order status (admin)
      security: [ { AdminApiKey: [] } ]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [status]
              properties:
                status:
                  type: string
                  enum: [created, preparing, ready, delivered, cancelled]
                note: { type: string, nullable: true }
      responses:
        '200': { description: OK }
        '422': { description: Invalid status, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

  /api/orders/{id}/history:
    get:
      tags: [Orders]
      summary: Order status history (admin)
      security: [ { AdminApiKey: [] } ]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/OrderHistory' } } } }

  /api/inventory:
    get:
      tags: [Inventory (Admin)]
      summary: List inventory view (admin)
      security: [ { AdminApiKey: [] } ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: integer }
                        name: { type: string }
                        category: { type: string, nullable: true }
                        price: { type: number, format: float }
                        vat_rate: { type: number, format: float }
                        stock: { type: integer }
                        available: { type: integer }

  /api/menuitems/{id}/stock:
    put:
      tags: [Inventory (Admin)]
      summary: Set absolute stock for a menu item
      security: [ { AdminApiKey: [] } ]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [stock]
              properties:
                stock: { type: integer, minimum: 0 }
      responses:
        '200': { description: OK }

  /api/menuitems/{id}/restock:
    post:
      tags: [Inventory (Admin)]
      summary: Increment/decrement stock by delta
      security: [ { AdminApiKey: [] } ]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [delta]
              properties:
                delta: { type: integer }
      responses:
        '200': { description: OK }

  /api/menuitems/{id}/availability:
    post:
      tags: [Inventory (Admin)]
      summary: Set availability flag (0/1)
      security: [ { AdminApiKey: [] } ]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [available]
              properties:
                available: { type: integer, enum: [0,1] }
      responses:
        '200': { description: OK }

  /api/rates:
    get:
      tags: [Rates (Admin)]
      summary: List exchange rates
      security: [ { AdminApiKey: [] } ]
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/ExchangeRateList' } } } }
    post:
      tags: [Rates (Admin)]
      summary: Upsert exchange rate
      security: [ { AdminApiKey: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [currency, rate]
              properties:
                currency: { type: string, enum: [RON, EUR, USD] }
                rate: { type: number, format: float, minimum: 0 }
      responses:
        '200': { description: OK }

  /api/stats:
    get:
      tags: [Stats (Admin)]
      summary: Dashboard statistics
      security: [ { AdminApiKey: [] } ]
      parameters:
        - name: from
          in: query
          schema: { type: string, format: date }
        - name: to
          in: query
          schema: { type: string, format: date }
        - $ref: '#/components/parameters/CurrencyParam'
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/StatsResponse' } } } }

  /api/webhooks/payment:
    post:
      tags: [Webhooks]
      summary: Payment gateway webhook (simulation)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [orderId, status]
              properties:
                orderId: { type: integer }
                status: { type: string, example: captured }
      responses:
        '200': { description: OK }
